[{"content":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThe Cloud. It’s the future of IT infrastructure, and the future is now. But as a guy who\u0026rsquo;s spent most of his career in on-prem networks, my understanding of the Cloud was limited to \u0026ldquo;someone else\u0026rsquo;s computer,\u0026rdquo; or the place where my iPhone photos are backed up. In the IT industry, you must always be learning and as technology evolves, so should you. My goal: Demystify the Cloud.\u003c/p\u003e\n\u003cp\u003eI began my cloud journey with the AWS Cloud Practitioner Certification. Suddenly, I found myself drowning in a sea of cloud services with names like Kinesis, DynamoDB, and Aurora. It felt like deciphering a secret language. But amidst the confusion, I realized the immense power of the Cloud. I could build an entire enterprise infrastructure on someone else\u0026rsquo;s hardware with just a few lines of code. Mind. Blown.\u003c/p\u003e\n\u003cp\u003eCloud Engineering. DevOps. Call it what you want. I wanted to replace the endless clicking and configuring in various GUIs with the elegance of code. Seven years ago, my journey into tech began on the path of web development. Circumstances led me in a different direction: IT Support. Now, with widespread cloud adoption and remote work becoming more prevalent, I see a new opportunity to merge my passion for IT infrastructure and automation.\u003c/p\u003e\n\u003cp\u003eEnter the \u003ca href=\"https://cloudresumechallenge.dev/docs/the-challenge/aws/\"\u003eCloud Resume Challenge\u003c/a\u003e, a brainchild of renowned internet man Forrest Brazeal. It\u0026rsquo;s a project that puts your Cloud engineering skills to the test. As I embarked on this challenge while studying for my AWS Solutions Architect Associate Certification, I encountered my fair share of struggles and triumphs. This article is a firsthand account of my journey, sharing the moments of frustration and the joy when everything finally fell into place.\u003c/p\u003e\n\u003cp\u003eJoin me as I dive into the Cloud Resume Challenge, exploring the fascinating world of Cloud Engineering and recounting the obstacles I faced along the way.\u003c/p\u003e\n\u003ch2 id=\"project-overview-tldr-edition\"\u003eProject Overview (TLDR Edition)\u003c/h2\u003e\n\u003cp\u003eThe Cloud Resume Challenge tasks its participants with creating a basic HTML version of their resume and hosting it on AWS using a variety of cloud services, focusing on serverless architecture. That infrastructure should then be converted to code and deployed using a CI/CD pipeline with integrated testing. Here’s a quick run-down of how I interpreted these prompts, and the technologies I used to accomplish each phase of the project:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFront-End\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003ePortfolio Website\u003c/em\u003e\n\u003cul\u003e\n\u003cli\u003eCreated using Hugo, a popular static site generator built on Google’s Go language.\u003c/li\u003e\n\u003cli\u003eHugo Theme – Modified version of Hugo Profile\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eResume\u003c/em\u003e\n\u003cul\u003e\n\u003cli\u003eHTML/CSS version of my resume, with download links to PDF and DOCX versions.\u003c/li\u003e\n\u003cli\u003eView Counter using JavaScript. See next section, “API”\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eS3\u003c/em\u003e – Hosts website, configured with “Public Access.” A second S3 bucket is used to redirect www traffic to the root domain.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eCloudFront\u003c/em\u003e – Caching, SSL certificate, and HTTP to HTTPS redirection.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eRoute53\u003c/em\u003e – A record aliases for CloudFront, API-Gateway endpoint, and S3 redirection bucket.\n\u003cul\u003e\n\u003cli\u003eDomain name, stevenhoward.net, purchased from AWS.\u003c/li\u003e\n\u003cli\u003eHosted Zone’s Name Servers applied to domain via Terraform.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eView Counter\u003c/em\u003e, just like those old Geocities / Angelfire pages! All I’m missing is a pixelated, spinning “Under Construction” GIF.\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eJavaScript\u003c/em\u003e linked at the bottom of the Resume page. On every page load, makes calls to…\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eAPI Gateway\u003c/em\u003e (with Cross Origin Resource Sharing headers), linked to…\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eLambda\u003c/em\u003e function written in Python (boto3), which reads, increments, writes, and returns a number stored on a…\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDynamoDB\u003c/em\u003e table, stores the view count number.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eEnd-to-End Testing\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCypress, a JavaScript testing framework that simulates the loading of a web page and clicking various elements. See “CI/CD” section for more details.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eInfrastructure as Code (IaC)\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eTerraform\u003c/em\u003e, the industry leader in provisioning infrastructure via code.\n\u003cul\u003e\n\u003cli\u003eDeploys all back-end infrastructure, including S3, API Gateway, Lambda, DynamoDB, Route53, Certificate Manager, and CloudFront.\u003c/li\u003e\n\u003cli\u003eState stored in \u003cem\u003eTerraform Cloud\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eContinuous Integration / Continuous Deployment (CI/CD)\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eGitHub Actions\u003c/em\u003e\n\u003cul\u003e\n\u003cli\u003eBack-End\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eTerraform\u003c/em\u003e – Applies all back-end infrastructure.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eCypress\u003c/em\u003e – Tests API reachability.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFront-End\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eHugo\u003c/em\u003e – Builds static website.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eAWS CLI\u003c/em\u003e – Copies website files to S3 bucket.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eCypress\u003c/em\u003e – Tests HTTP return code and BODY content.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","description":null,"image":"/images/cloud-resume-diagram.png","permalink":"https://stevenhoward.net/blogs/cloud-portfolio/","title":"Creating My Cloud Portfolio"},{"content":"\u003cp\u003eNAPALM (Network Automation and\nProgrammability Abstraction Layer with\nMultivendor support)\nA Python library that implements a set of\nfunctions to interact with different network\ndevice Operating Systems using a unified\nAPI.\u003c/p\u003e\n","description":null,"image":"/images/cisco.jpg","permalink":"https://stevenhoward.net/blogs/open-port-audit/","title":"Open Port Audit"}]